<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Infinite Side Scrolling Text Editor</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400&display=swap" rel="stylesheet"> <!-- Include Roboto Mono -->
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        #editor {
            width: 100%;
            height: 80vh;
            border: 1px solid #ccc;
            overflow-x: auto; /* Enable horizontal scrolling */
            white-space: pre; /* Prevent text wrapping */
            padding: 10px;
            box-sizing: border-box;
            background-color: white;
            font-family: 'Roboto Mono', monospace; /* Set font to Roboto Mono */
        }
        #editor:focus {
            outline: none; /* Remove default outline */
        }
    </style>
</head>
<body>

    <h1>Infinite Side Scrolling Text Editor</h1>
    <div id="editor" contenteditable="true">
</div> <!-- Default text set inline -->

    <script>
        const editor = document.getElementById('editor');

        // Load saved text from localStorage if available
        window.onload = function() {
            fetch('text.txt') // Fetch the text file
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text(); // Read the response as text
                })
                .then(data => {
                    editor.innerText = data; // Set editor content to file content
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                    editor.innerText = "Hello world"; // Fallback content if fetch fails
                });

            editor.focus(); // Focus the editor
        };

        // Save text to localStorage on input change
        editor.addEventListener('input', () => {
            
const text = editor.innerText; // Get the text from the editor
            const blob = new Blob([text], { type: 'text/plain' }); // Create a blob from the text
            const url = URL.createObjectURL(blob); // Create a URL for the blob

            const a = document.createElement('a'); // Create an anchor element
            a.href = url; // Set the href to the blob URL
            a.download = 'text.txt'; // Set the default filename
            document.body.appendChild(a); // Append anchor to body
            a.click(); // Programmatically click the anchor to trigger download
            document.body.removeChild(a); // Remove anchor from body
            URL.revokeObjectURL(url); // Revoke the blob URL

        });

        // Optional: Handle key events for additional functionality
        editor.addEventListener('keydown', (event) => {
            if (event.key === 'Tab') {
                event.preventDefault(); // Prevent default tab behavior
                document.execCommand('insertText', false, '    '); // Insert four spaces
            }
        });
    </script>

</body>
</html>
